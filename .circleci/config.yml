version: 2.1

commands:
  destroy-environment:
    description: Destroy environments  
    steps:
      - attach_workspace:
          at: project/infrastructure/tfdestroy
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            cd infrastructure
            terraform version
            terraform apply -auto-approve tfdestroy
            cd ..


jobs:
  build:
    docker:
      # Use the same Docker base as the project 
      - image: python:3.7.3-stretch

    working_directory: ~/repo

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            make install
            pip install pylint
            # Install hadolint
            wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
            chmod +x /bin/hadolint
      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}

  # run lint!
      - run:
          name: run lint
          command: |
            . venv/bin/activate
            make lint 
  
  create-infrastructure:
    docker: 
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install tar gzip and awscli
          command: |
            yum install -y tar gzip
      - run:
          name: Install terraform
          command: |
            yum install -y yum-utils
            yum-config-manager --add-repo https://rpm.releases.hashicorp.com/AmazonLinux/hashicorp.repo
            yum -y install terraform
      - run:
          name: Deploy infrastructure
          command: |
            cd infrastructure/
            terraform init -input=false
            terraform  apply -auto-approve
            cd ..
      - run:
          name: Add server ip to ansible inventory
          command: |
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=Menu_app" \
              --output text >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
            fingerprints: ["22:e4:5c:56:26:31:a9:63:51:10:71:c2:60:3c:c5:02"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install ansible
          command: |
            apk add --update ansible
      - run:
          name: Configure server
          command: |
            cat inventory.txt
            ansible-playbook -i .circleci/ansible/inventory.txt .circleci/ansible/config-server.yml
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
  
  deploy-app:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Build and run docker image
          command: |
            cat ~/doc_pass.txt | docker login --username vinopaul --password-stdin
            
            # Build image and add a descriptive tag
            docker build --tag vinopaul/menu-app:v1.0.0 .

            # Push docker image to dockerhub
            docker push vinopaul/menu-app:v1.0.0

            # List docker images
            docker image ls
      - run:
          name: Deploy server
          command: |
            cat inventory.txt
            ansible-playbook -i .circleci/ansible/inventory.txt .circleci/ansible/deploy-server.yml

workflows:
  default:
    jobs:
      - build
      - create-infrastructure:
          requires: [build]
      - configure-infrastructure:
          requires: [create-infrastructure]
      - deploy-app:
          requires: [configure-infrastructure]
        


